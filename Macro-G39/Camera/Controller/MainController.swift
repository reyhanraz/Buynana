//
//  ViewController.swift
//  Macro-G39
//
//  Created by Reyhan Rifqi on 05/10/20.
//  Modified by Faris Ali on 02/10/20.
//

import UIKit
import Photos
import Vision
import CoreML

class MainController: UIViewController, UIImagePickerControllerDelegate & UINavigationControllerDelegate {
    
    public var sendImage = #imageLiteral(resourceName: "camera-button")
    public var typeAccuration = "100%"
    public var typeBanana = "Pisang"
    @IBOutlet weak var thisLabel: UILabel!
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    @IBOutlet fileprivate var backButton: UIButton!
    
    let cameraController = CameraController()
    
    override var prefersStatusBarHidden: Bool { return true }
    
}

extension MainController {
    override func viewDidLoad() {
        
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        configureCameraController()
        detectTypeImage()
        
    }
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = true
    }
}

extension MainController {
    func detectTypeImage() {
        guard let model = try? VNCoreMLModel(for: JenisPisang1().model) else {
            fatalError("Failed to load model")
        }
        
        // Create a vision request
        let request = VNCoreMLRequest(model: model) {[weak self] request, error in
            guard let results = request.results as? [VNClassificationObservation],
                let topResult = results.first
                else {
                    fatalError("Unexpected results")
            }
            
            // Update the Main UI Thread with our result
            DispatchQueue.main.async { [weak self] in
                print("\(Int(topResult.confidence * 100))% \(topResult.identifier)")
                self?.typeAccuration = "\(Int(topResult.confidence * 100))%"
                self?.typeBanana = "\(topResult.identifier)"
                self?.thisLabel.text = "\(Int(topResult.confidence * 100))% \(topResult.identifier)"
            }
        }
        
        guard let ciImage = CIImage(image: self.sendImage)
            else { fatalError("Cant create CIImage from UIImage") }
        
        // Run klasifikasi jenis pisang
        let handler = VNImageRequestHandler(ciImage: ciImage)
        DispatchQueue.global().async {
            do {
                try handler.perform([request])
            } catch {
                print(error)
            }
        }
        
    }
    
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "blitz-icon"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "flash"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "flipCamera-icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "flipCamera-icon"), for: .normal)
            
        case .none:
            return
        }
    }
    
    @IBAction func takeImage(_ sender: UIButton){
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.photoLibrary) {
            let imagePicker = UIImagePickerController()
            imagePicker.delegate = self
            imagePicker.sourceType = UIImagePickerController.SourceType.photoLibrary
            imagePicker.allowsEditing = true
            self.present(imagePicker, animated: true, completion: nil)
        }
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if let pickedImage = info[UIImagePickerController.InfoKey.originalImage.rawValue] as? UIImage {
//            myPhoto.contentMode = .scaleToFill
//            myPhoto.image = pickedImage
            self.sendImage = pickedImage
        }
        picker.dismiss(animated: true, completion: nil)
        detectTypeImage()
        performSegue(withIdentifier: "captureToDetailPage", sender: nil)
    }
    
    
    @IBAction func captureImage(_ sender: UIButton) {
        cameraController.captureImage {(image, error) in
            self.sendImage = image!
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: image)
            }
        }
        detectTypeImage()
        performSegue(withIdentifier: "captureToDetailPage", sender: nil)
    }
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let destination = segue.destination as? DetailPageVC{
            destination.delegate = self
            destination.image = self.sendImage
        }
    }
}
extension MainController: ModalHandler{
    func modalDismissed() {
        let storyB = UIStoryboard(name: "RecipeSB", bundle: nil)
        let vc = storyB.instantiateViewController(withIdentifier: "RecipeVC") as! RecipeVC
        self.navigationController?.pushViewController(vc, animated: true)
    }
}
protocol ModalHandler: AnyObject {
    func modalDismissed()
}
